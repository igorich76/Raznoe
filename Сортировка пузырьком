a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6, 8, -2, 99]
длина_списка = len(a)

# внешний цикл мы делаем длиной длина_списка - 1 для того, чтобы алгоритм, оказавшись
# на последнем индексе списка не столкнулся с тем, что текущий элемент списка ему
# не с чем сравнивать, т.к. справа больше ничего нет

диапазон_внешнего_цикла = длина_списка - 1

for i in range(диапазон_внешнего_цикла):

# диапазон внутреннего списка мы уменьшаем на величину индекса текущего внешнего
# цикла потому, что в предыдущем цикле (если это не первый), мы уже поставили в
# конец списка самый большой элемент, а следовательно, сравнивать элементы списка,
# которые уже были отсортированы и стоят на своих местах, смысла нет.
# с каждым следующим внешним циклом, количество отсортированных и поставленных в
# конец списка элементов увеличивается на 1, как и увеличивается i. Следовательно,
# отнимая i от длины списка, мы выводим за границу обработки алгоритмом уже
# отсортированные элементы.

    диапазон_внутреннего_цикла = диапазон_внешнего_цикла - i
    
    for j in range(диапазон_внутреннего_цикла):
        
        if a[j] > a[j + 1]:                  # если порядок элементов пары неправильный
            a[j], a[j + 1] = a[j + 1], a[j]  # меняем элементы пары местами 

print('Отсортированный список:', a)
